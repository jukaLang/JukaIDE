@page "/"
@inject IJSRuntime JS
@inject NavigationManager NavManager

<PageTitle>Juka Programming Language</PageTitle>

<h1>Welcome to Juka</h1>

<div>This website/app can work offline by installing it in a Chromium (Google Chrome) based browser or bookmarking it on your phone!</div>


<br/><br/>

Enter Your Code Below and Click Run: <br/><br/>

<MonacoEditor Id="myjukamonaco" ConstructionOptions="EditorConstructionOptions" OnDidChangeModelContent="OnDidChangeModelContent" />

<button @onclick="RunCode">Run Code</button>
<button class="jide_linkbutton" @onclick="LinkToCode">Get Link to Code</button>
<button class="jide_dlbutton" @onclick="DownloadCode">Download Code</button>
<InputFile OnChange="@UploadCode" multiple id="filePicker" style="display:none"/>
<button class="jide_upbutton" onclick="document.getElementById('filePicker').click()">Upload Code</button>
<br/><br/>
<div class="output">Output:</div>
<span>@ExecutedOn</span>
<pre>@OutputValue</pre>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string? Data { get; set; }

    private string? ExecutedOn { get; set; }
    private string? OutputValue { get; set; } = "Click \"Run Code\" to run the code!";

    private MonacoEditor? _editor;
    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor? editor)
    {
        _editor = editor;

        if (String.IsNullOrEmpty(Data))
        {
            Data = @"func main() = {
    // outputs 'Hello World'
    var x = ""Hello World"";
    printLine(x);
}";
        }

        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
                Language = "juka",
                Value = Data
        };
    }
    
    protected override async Task OnInitializedAsync()
    {
        await JS.InvokeVoidAsync("blazorMonaco.languages.register");
        await MonacoEditorBase.DefineTheme("JukaTheme", new StandaloneThemeData
        {
            Base = "vs",
            Inherit = true,
            Rules = new List<TokenThemeRule>
            {
                new TokenThemeRule { Token = "func", Foreground = "00e0bc" },
                new TokenThemeRule { Token = "keyword", Foreground = "FF4500" },
                new TokenThemeRule { Token = "number", Foreground = "54a154" },
                new TokenThemeRule { Token = "comment", Foreground = "888ed1" }
            }
        });
        await MonacoEditorBase.SetTheme("JukaTheme");
    }

    public async Task OnDidChangeModelContent(ModelContentChangedEvent e)
    {
        var model = await _editor.GetModel();
        Data = await model.GetValue(EndOfLinePreference.TextDefined, false);
    }

    public async Task LinkToCode()
    {
        OutputValue = NavManager.BaseUri.ToString() + "?code=" + Uri.EscapeDataString(Data);
        ExecutedOn = "Executed on: " + (DateTime.Now).ToString("F");
    }

    public async Task DownloadCode()
    {
        await JS.InvokeVoidAsync("blazorMonaco.languages.download", Data);
    }

    public async Task UploadCode(InputFileChangeEventArgs e)
    {
        try
        {
            foreach (var file in e.GetMultipleFiles(1))
            {
                Data = await new StreamReader(file.OpenReadStream(15728640)).ReadToEndAsync();

                _editor.SetValue(Data);
            }
            OutputValue = "Click \"Run Code\" to run the new code!";
        }
        catch (Exception exc)
        {
            OutputValue = "File Failed to load. Make sure the file doesn't exceed 15MB or 15728640 bytes";
        }
        ExecutedOn = "";
    }
    
    public void RunCode()
    {
        OutputValue = new Compiler().Go(Data ?? "", false);
        ExecutedOn = "Executed on: "+(DateTime.Now).ToString("F");
    }
}
