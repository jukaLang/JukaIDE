@page "/"
@inject IJSRuntime JS
@inject NavigationManager NavManager

<PageTitle>Juka App (WASM)</PageTitle>

<h1>Welcome to Juka App (WASM)</h1>

<span>This website/app can work offline by clicking "Install App" near the URL in a Chromium (Google Chrome) based browser if you are on Desktop or clicking "Add to Homescreen" if you are using a phone/tablet.<br/>
    Visit our official website at <a href="https://jukalang.com" target="_blank">https://jukalang.com</a></span>

<br/>
<br/>

Enter Your Code Below and Click Run: <br/><br/>

<MonacoEditor Id="myjukamonaco" ConstructionOptions="EditorConstructionOptions" OnDidChangeModelContent="OnDidChangeModelContent" />

<button @onclick="RunCode">Run Code</button>
<button class="jide_linkbutton" @onclick="LinkToCode">Get Link to Code</button>
<button class="jide_dlbutton" @onclick="DownloadCode">Download Code</button>
<InputFile OnChange="@UploadCode" multiple id="filePicker" style="display:none"/>
<button class="jide_upbutton" onclick="document.getElementById('filePicker').click()">Upload Code</button>
<button @onclick="ChangeDark">@(DarkMode)</button>
<br/><br/>
<span class="output">Log: </span><button class="clearlog" @onclick="ClearLog">Clear Log</button><br/>
<div id="OutputVal">@((MarkupString)(OutputValue ?? ""))</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string? Data { get; set; }

    private string? OutputValue { get; set; } = "<span class=\"eon\">[" + DateTime.Now.ToString("F") + "]</span> " + "Loading...<br/><br/>";
    private string? UriValue { get; set; } = "";

    private string DarkMode { get; set; } = "🌕";

    private MonacoEditor? _editor;
    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor? editor)
    {
        _editor = editor;

        if (String.IsNullOrEmpty(Data))
        {
            Data = @"func main() = {
    // outputs 'Hello World'
    var x = ""Hello World"";
    printLine(x);
}";
        }

        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
                Language = "juka",
                Value = Data
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await JS.InvokeVoidAsync("blazorMonaco.languages.register");
        await MonacoEditorBase.DefineTheme("JukaTheme", new StandaloneThemeData
        {
            Base = "vs",
            Inherit = true,
            Rules = new List<TokenThemeRule>
            {
                new() { Token = "func", Foreground = "00e0bc" },
                new() { Token = "keyword", Foreground = "FF4500" },
                new() { Token = "number", Foreground = "54a154" },
                new() { Token = "comment", Foreground = "888ed1" }
            }
        });
        await MonacoEditorBase.DefineTheme("JukaThemeDark", new StandaloneThemeData
        {
            Base = "vs-dark",
            Inherit = true,
            Rules = new List<TokenThemeRule>
            {
                new() { Token = "func", Foreground = "00e0bc" },
                new() { Token = "keyword", Foreground = "FF4500" },
                new() { Token = "number", Foreground = "54a154" },
                new() { Token = "comment", Foreground = "888ed1" }
            }
        });
        
        await MonacoEditorBase.SetTheme("JukaTheme");
        OutputValue = "<span class=\"eon\">[" + DateTime.Now.ToString("F") + "]</span> " + "Click \"Run Code\" to run the code!<br/><br/>" + OutputValue;
    }

    public async Task CopyToClipboard(string text)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    public async Task OnDidChangeModelContent(ModelContentChangedEvent e)
    {
        if (_editor != null)
        {
            var model = await _editor.GetModel();
            Data = await model.GetValue(EndOfLinePreference.TextDefined, false);
            UriValue = "?code=" + Uri.EscapeDataString(Data);
            NavManager.NavigateTo($"/{UriValue}");
        }
    }

    public void ClearLog()
    {
        OutputValue = "";
    }

    public void LinkToCode()
    {
        OutputValue = "<span class=\"eon\">[" + DateTime.Now.ToString("F") + "]</span> " + NavManager.BaseUri + UriValue + "<br/><br/>" + OutputValue;
    }

    public async Task DownloadCode()
    {
        await JS.InvokeVoidAsync("blazorMonaco.languages.download", Data);
    }

    public async Task UploadCode(InputFileChangeEventArgs e)
    {
        if (_editor != null)
        {
            OutputValue = "<span class=\"eon\">[" + DateTime.Now.ToString("F") + "]</span> " + "Loading file...<br/><br/>" + OutputValue;
            try
            {
                foreach (var file in e.GetMultipleFiles(1))
                {
                    Data = await new StreamReader(file.OpenReadStream(15728640)).ReadToEndAsync();

                    await _editor.SetValue(Data);
                }
                OutputValue = "<span class=\"eon\">[" + DateTime.Now.ToString("F") + "]</span> " + "Loaded file...<br/><br/>" + OutputValue;
            }
            catch (Exception)
            {
                OutputValue = "<span class=\"eon\">[" + DateTime.Now.ToString("F") + "]</span> " + "File Failed to load. Make sure the file doesn't exceed 15MB or 15728640 bytes<br/><br/>" + OutputValue;
            }
        }
    }
    
    public void RunCode()
    {
        OutputValue = "<span class=\"eon\">[" + DateTime.Now.ToString("F") + "]</span><span class=\"outside\"> [Running Juka...]</span></br><span class=\"inside\">" + new Compiler().Go(Data ?? "", false).Replace(Environment.NewLine, "<br/>") + "</span><br/><span class=\"eon\">[" + DateTime.Now.ToString("F") + "]</span><span class=\"outsidet\"> [Completed]</span><br/><br/>" + OutputValue;
    }

    public async Task ChangeDark()
    {
        if (DarkMode == "🌕")
        {
            await MonacoEditorBase.SetTheme("JukaThemeDark");
            await JS.InvokeVoidAsync("blazorMonaco.languages.dark");
            DarkMode = "🌞";
        }
        else
        {
            await MonacoEditorBase.SetTheme("JukaTheme");
            await JS.InvokeVoidAsync("blazorMonaco.languages.light");
            DarkMode = "🌕";
        }
    }
}
